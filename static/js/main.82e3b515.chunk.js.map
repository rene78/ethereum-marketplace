{"version":3,"sources":["components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","target","rel","id","this","props","account","Component","Main","_this","onSubmit","event","preventDefault","name","productName","value","price","window","web3","utils","toWei","productPrice","toString","createProduct","type","ref","input","placeholder","required","scope","products","map","product","key","fromWei","owner","purchased","onClick","purchaseProduct","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","loading","state","marketplace","methods","send","from","once","receipt","productCount","bind","assertThisInitialized","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Marketplace","networks","Contract","abi","address","i","concat","toConsumableArray","console","log","_this2","components_Navbar","role","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82e3b515.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"https://github.com/rene78\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Rene's Blockchain Marketplace\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-white\"><span id=\"account\">{this.props.account}</span></small>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div id=\"content\">\n        <h1>Add Product</h1>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          const name = this.productName.value\n          const price = window.web3.utils.toWei(this.productPrice.value.toString(), 'Ether')\n          this.props.createProduct(name, price)\n        }}>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"productName\"\n              type=\"text\"\n              ref={(input) => { this.productName = input }}\n              className=\"form-control\"\n              placeholder=\"Product Name\"\n              required />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"productPrice\"\n              type=\"text\"\n              ref={(input) => { this.productPrice = input }}\n              className=\"form-control\"\n              placeholder=\"Product Price\"\n              required />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">Add Product</button>\n        </form>\n        <p>&nbsp;</p>\n        <h2>Buy Product</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Price</th>\n              <th scope=\"col\">Owner</th>\n              <th scope=\"col\"></th>\n            </tr>\n          </thead>\n          <tbody id=\"productList\">\n            {this.props.products.map((product, key) => {\n              return (\n                <tr key={key}>\n                  <th scope=\"row\">{product.id.toString()}</th>\n                  <td>{product.name}</td>\n                  <td>{window.web3.utils.fromWei(product.price.toString(), \"ether\")} Eth</td>\n                  <td>{product.owner}</td>\n                  <td>\n                    {!product.purchased\n                      ? <button\n                        name={product.id}\n                        value={product.price}\n                        onClick={(event) => {\n                          this.props.purchaseProduct(event.target.name, event.target.value)\n                        }}\n                        >\n                          Buy\n                        </button>\n                      : null\n                    }\n                  </td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n        <p><a href=\"https://ropsten.etherscan.io/address/0x781c71bfe45d1c5d81fca75d17bb589cc72d63fc\" target=\"_blank\">Contract information</a></p>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport Marketplace from '../abis/Marketplace.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId()\n    const networkData = Marketplace.networks[networkId]\n    if (networkData) {\n      const marketplace = web3.eth.Contract(Marketplace.abi, networkData.address)\n      this.setState({ marketplace })\n      const productCount = await marketplace.methods.productCount().call()\n      // console.log(productCount.toString())\n      this.setState({ productCount })\n      //Load products\n      for (let i = 0; i <= productCount; i++) {\n        const product = await marketplace.methods.products(i).call()\n        this.setState({\n          products: [...this.state.products, product]\n        })\n      }\n      this.setState({ loading: false })\n      console.log(this.state.products)\n    } else {\n      window.alert('Marketplace contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      productCount: 0,\n      products: [],\n      loading: true\n    }\n\n    // this.createProduct = this.createProduct.bind(this)\n    this.purchaseProduct = this.purchaseProduct.bind(this)\n  }\n\n  createProduct = (name, price) => {\n    this.setState({ loading: true })\n    this.state.marketplace.methods.createProduct(name, price).send({ from: this.state.account })\n      .once('receipt', (receipt) => {\n        this.setState({ loading: false })\n      })\n  }\n  \n  purchaseProduct(id, price) {\n    this.setState({ loading: true })\n    this.state.marketplace.methods.purchaseProduct(id).send({ from: this.state.account, value: price })\n      .once('receipt', (receipt) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\n              {this.state.loading\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\n                : <Main\n                  products = {this.state.products}\n                  createProduct = {this.createProduct}\n                  purchaseProduct = {this.purchaseProduct} />\n              }\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}